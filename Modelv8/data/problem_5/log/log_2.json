{
    "problem_type": "MILP",
    "description": "A protein powder supply chain consists of Contract Manufacturer, Warehouse and Distributor. The flow is Contract Manufacturer to Warehouse to Distributor. Warehouses are at locations - Bhiwandi, Bangalore and Delhi. The Distributors are located at Agra, Ludhiana, Hyderabad, Indore, Jaipur, Surat, Vadodara and Tirunelveli. The Contract Manufacturers are at locations - Ahemdabad, Chennai. Optimise the supply chain network. It should also tell which manufacturer is supplying to which warehouse and which warehouse is supplying to which distributor. The cost of transportation per km is Rs. \\param{TransportCost}. The distances are specified below.\n\nManufacturer to Warehouse Distances (km)\nManufacturer\tBhiwandi\tBengaluru\tDelhi\nAhmedabad\t\\param{DistCMB}_11\t\\param{DistCMB}_12\t\\param{DistCMB}_13\nChennai\t\\param{DistCMB}_21\t\\param{DistCMB}_22\t\\param{DistCMB}_23\n\n\nWarehouse to Distributor Distances (km)\nWarehouse\tAgra\tLudhiana\tHyderabad\tIndore\tJaipur\tSurat\tVadodara\tTirunelveli\nBhiwandi\t\\param{DistBWD}_11\t\\param{DistBWD}_12\t\\param{DistBWD}_13\t\\param{DistBWD}_14\t\\param{DistBWD}_15\t\\param{DistBWD}_16\t\\param{DistBWD}_17\t\\param{DistBWD}_18\nBengaluru\t\\param{DistBWD}_21\t\\param{DistBWD}_22\t\\param{DistBWD}_23\t\\param{DistBWD}_24\t\\param{DistBWD}_25\t\\param{DistBWD}_26\t\\param{DistBWD}_27\t\\param{DistBWD}_28\nDelhi\t\\param{DistBWD}_31\t\\param{DistBWD}_32\t\\param{DistBWD}_33\t\\param{DistBWD}_34\t\\param{DistBWD}_35\t\\param{DistBWD}_36\t\\param{DistBWD}_37\t\\param{DistBWD}_38\n\nCount and add the number of each stakeholders that is Contract manufacturer, warehouse, distributor. Any manufacturer can supply to any number of warehouses and any warehouse can supply to any number of Distributors.\nDo not consider the flow quantity while formulating the objective function. Only consider the cost associated with distance.",
    "problem_info": "Minimize the transportation cost in a supply chain network.",
    "input_format": "Number of contract manufacturers, number of warehouses, number of distributors, distance between each pair of manufacturers and warehouses, distance between each pair of warehouses and distributors, transportation cost per km.",
    "output_info": "Optimal supply chain network configuration and total transportation cost.",
    "output_format": "Assignment of each manufacturer to warehouses, Assignment of each warehouse to distributors",
    "parameters": [
        {
            "definition": "Number of Contract Manufacturers",
            "symbol": "{ContractManufacturers}",
            "value": 2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Warehouses",
            "symbol": "{Warehouses}",
            "value": 3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Distributors",
            "symbol": "{Distributors}",
            "value": 8,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Contract Manufacturer c and Warehouse w",
            "symbol": "{DistCMB}_cw",
            "value": [
                [
                    501.9,
                    1433.2,
                    875.3
                ],
                [
                    1758.4,
                    327.4,
                    2180.4
                ]
            ],
            "shape": [
                "ContractManufacturers",
                "Warehouses"
            ],
            "status": "formulated"
        },
        {
            "definition": "Distance between Warehouse w and Distributor d",
            "symbol": "{DistBWD}_wd",
            "value": [
                [
                    1153.7,
                    1586.3,
                    1428.5,
                    692.3,
                    1085.5,
                    449.2,
                    430.7,
                    2086.9
                ],
                [
                    1923.6,
                    2356.2,
                    578.9,
                    1503.3,
                    2006.4,
                    1372.0,
                    1298.4,
                    654.3
                ],
                [
                    216.2,
                    339.5,
                    1492.2,
                    826.0,
                    250.2,
                    1120.5,
                    977.7,
                    2460.4
                ]
            ],
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "formulated"
        },
        {
            "definition": "Cost of transportation per km",
            "symbol": "{TransportCost}",
            "value": 6,
            "shape": [],
            "status": "formulated"
        }
    ],
    "variables": [
        {
            "definition": "Flow from Contract Manufacturer c to Warehouse w",
            "symbol": "{FlowCMB}_cw",
            "type": "binary",
            "shape": [
                "ContractManufacturers",
                "Warehouses"
            ],
            "status": "coded",
            "code": "FlowCMB = model.addVars(ContractManufacturers, Warehouses, name='FlowCMB')"
        },
        {
            "definition": "Flow from Warehouse w to Distributor d",
            "symbol": "{FlowBWD}_wd",
            "type": "binary",
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "coded",
            "code": "FlowBWD = model.addVars(Warehouses, Distributors, name=\"FlowBWD\")"
        }
    ],
    "data": [
        {
            "{DistCMB}_cw": [
                [
                    501.9,
                    1433.2,
                    875.3
                ],
                [
                    1758.4,
                    327.4,
                    2180.4
                ]
            ]
        },
        {
            "{DistBWD}_wd": [
                [
                    1153.7,
                    1586.3,
                    1428.5,
                    692.3,
                    1085.5,
                    449.2,
                    430.7,
                    2086.9
                ],
                [
                    1923.6,
                    2356.2,
                    578.9,
                    1503.3,
                    2006.4,
                    1372.0,
                    1298.4,
                    654.3
                ],
                [
                    216.2,
                    339.5,
                    1492.2,
                    826.0,
                    250.2,
                    1120.5,
                    977.7,
                    2460.4
                ]
            ]
        }
    ],
    "path": "/home/ckushj/LLM_Agent_SCO/Modelv8/data/problem_5",
    "background": "A protein powder supply chain consists of Contract Manufacturers (CM), Warehouses (WH), and Distributors (Dist). The flow is from CM to WH to Dist. There are {ContractManufacturers} potential CMs, {Warehouses} WHs, and {Distributors} Dist. The objective is to minimize the total transportation cost. The cost of transportation per km is {TransportCost}.  The distances between each CM and WH, and each WH and Dist are given in matrices {DistCMB} and {DistBWD} respectively.",
    "objective": [
        {
            "description": "Minimize the total transportation cost in the supply chain network",
            "status": "coded",
            "formulation": "\\sum_{c=1}^{\\textup{{ContractManufacturers}}} \\sum_{w=1}^{\\textup{{Warehouses}}} \\textup{{FlowCMB}}_{cw} \\cdot \\textup{{DistCMB}}_{cw} \\cdot \\textup{{TransportCost}} + \\sum_{w=1}^{\\textup{{Warehouses}}} \\sum_{d=1}^{\\textup{{Distributors}}} \\textup{{FlowBWD}}_{wd} \\cdot \\textup{{DistBWD}}_{wd} \\cdot \\textup{{TransportCost}}",
            "related_variables": [
                "FlowCMB",
                "FlowBWD"
            ],
            "related_parameters": [
                "ContractManufacturers",
                "Warehouses",
                "DistCMB",
                "TransportCost",
                "Warehouses",
                "Distributors",
                "DistBWD",
                "TransportCost"
            ],
            "code": "model.setObjective(gp.quicksum(gp.quicksum(FlowCMB[c, w] * DistCMB[c][w] * TransportCost for w in range(Warehouses)) for c in range(ContractManufacturers)) + gp.quicksum(gp.quicksum(FlowBWD[w, d] * DistBWD[w][d] * TransportCost for d in range(Distributors)) for w in range(Warehouses)), gp.GRB.MINIMIZE)"
        }
    ],
    "constraints": [
        {
            "description": "Sum of {FlowCMB}_cw over w should be 1 for all c",
            "formulation": "\\sum_{w=1}^{{Warehouses}} \\textup{{FlowCMB}}_{cw} = 1 \\quad \\forall \\; c \\in \\{1, 2, ..., {ContractManufacturers}\\}",
            "reasoning": "This constraint ensures that each contract manufacturer supplies to exactly one warehouse.",
            "status": "coded",
            "relevant_section": "Any manufacturer can supply to any number of warehouses and any warehouse can supply to any number of Distributors.",
            "related_variables": [
                "FlowCMB"
            ],
            "related_parameters": [],
            "code": "for c in range(ContractManufacturers):\n    model.addConstr(gp.quicksum(FlowCMB[c, w] for w in range(Warehouses)) == 1, name=\"sum_of_flow_from_CMB\")"
        },
        {
            "description": "Sum of {FlowBWD}_wd over w should be 1 for all d",
            "formulation": "\\sum_{w=1}^{{Warehouses}} \\textup{{FlowBWD}}_{wd} = 1 \\quad \\forall \\; d \\in \\{1, 2, ..., {Distributors}\\}",
            "reasoning": "This constraint ensures each distributor is supplied by exactly one warehouse.",
            "status": "coded",
            "relevant_section": "Any manufacturer can supply to any number of warehouses and any warehouse can supply to any number of Distributors.",
            "related_variables": [
                "FlowBWD"
            ],
            "related_parameters": [],
            "code": "for d in range(Distributors):\n    model.addConstr(gp.quicksum(FlowBWD[w, d] for w in range(Warehouses)) == 1, name=\"FlowBWD_sum_constraint_\" + str(d))"
        }
    ],
    "log_folder": "/home/ckushj/LLM_Agent_SCO/Modelv8/data/problem_5/log",
    "solution_status": "solved",
    "solver_output_status": 2,
    "obj_val": 26643.600000000002,
    "code": "\nimport json\nimport numpy as np\nimport math\n\nimport gurobipy as gp\nfrom gurobipy import GRB\n\n # Define model\nmodel = gp.Model('model')\n\n\n\n\nContractManufacturers = 2\nWarehouses = 3\nDistributors = 8\nDistCMB = [[501.9, 1433.2, 875.3], [1758.4, 327.4, 2180.4]]\nDistBWD = [[1153.7, 1586.3, 1428.5, 692.3, 1085.5, 449.2, 430.7, 2086.9], [1923.6, 2356.2, 578.9, 1503.3, 2006.4, 1372.0, 1298.4, 654.3], [216.2, 339.5, 1492.2, 826.0, 250.2, 1120.5, 977.7, 2460.4]]\nTransportCost = 6\n\n# Define model\nmodel = gp.Model('model')\n\nFlowCMB = model.addVars(ContractManufacturers, Warehouses, name='FlowCMB')\nFlowBWD = model.addVars(Warehouses, Distributors, name=\"FlowBWD\")\n\nfor c in range(ContractManufacturers):\n    model.addConstr(gp.quicksum(FlowCMB[c, w] for w in range(Warehouses)) == 1, name=\"sum_of_flow_from_CMB\")\n\nfor d in range(Distributors):\n    model.addConstr(gp.quicksum(FlowBWD[w, d] for w in range(Warehouses)) == 1, name=\"FlowBWD_sum_constraint_\" + str(d))\n\nmodel.setObjective(gp.quicksum(gp.quicksum(FlowCMB[c, w] * DistCMB[c][w] * TransportCost for w in range(Warehouses)) for c in range(ContractManufacturers)) + gp.quicksum(gp.quicksum(FlowBWD[w, d] * DistBWD[w][d] * TransportCost for d in range(Distributors)) for w in range(Warehouses)), gp.GRB.MINIMIZE)\n\n# Optimize model\nmodel.optimize()\n\n\n\n# Get model status\nstatus = model.status\n\nobj_val = None\n# check whether the model is infeasible, has infinite solutions, or has an optimal solution\nif status == gp.GRB.INFEASIBLE:\n    obj_val = \"infeasible\"\nelif status == gp.GRB.INF_OR_UNBD:\n    obj_val = \"infeasible or unbounded\"\nelif status == gp.GRB.UNBOUNDED:\n    obj_val = \"unbounded\"\nelif status == gp.GRB.OPTIMAL:\n    obj_val = model.objVal\n    print(\"The optimal solution is\", obj_val)\n\n"
}