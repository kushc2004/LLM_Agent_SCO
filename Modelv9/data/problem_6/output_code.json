{
    "problem_type": "MILP",
    "description": "A protein powder supply chain consists of \\param{Suppliers}, \\param{BondedWarehouses}, \\param{Manufacturers}, \\param{Warehouses}, and \\param{Distributors}. The flow of goods is from \\param{Suppliers} to \\param{BondedWarehouses}, from \\param{BondedWarehouses} goods can either go to \\param{Manufacturers} or to \\param{Warehouses}, then the goods from the \\param{Manufacturers} move to \\param{Warehouses} to then to \\param{Distributors}. \\param{Warehouses} are at \\param{NumWarehousesLocations} different locations. The \\param{Distributors} are located at \\param{NumDistributorLocations} different locations. The \\param{Manufacturers} is \\param{NumManufacturers} in number. The supply chain also has \\param{Suppliers} which are \\param{NumSuppliers} in number located at different locations. In the supply chain we have \\param{NumBondedWarehouses} \\param{BondedWarehouses} from where the goods goes from one \\param{Supplier} to one \\param{BondedWarehouse} only. Goods originating from a \\param{BondedWarehouse} have the option to be transferred directly to a single \\param{Warehouse}. Each \\param{Distributor} sources goods from exclusively one \\param{Warehouse}, while \\param{Warehouses} can supply multiple \\param{Distributors}. This task involves optimizing a supply chain network with a transportation cost of \\param{TransportationCost} per kilometer. The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values.\\n\\nThe distances are specified below.\\n\\param{Distance} matrix tell the distance between \\param{Supplier} and \\param{BondedWarehouse}\\n\\param{Distance1} matrix tell the distance between \\param{Manufacturer} and \\param{Warehouse}\\n\\param{Distance2} matrix tell the distance between \\param{Warehouse} and \\param{Distributor}\\n\\param{Distance3} matrix tell the distance between \\param{BondedWarehouse} and \\param{Warehouse}\\n\\param{Distance4} matrix tell the distance between \\param{BondedWarehouse} and \\param{Manufacturer}\\n\\n\\param{Manufacturers} can distribute products to any number of \\param{Warehouses}, and those \\param{Warehouses}, in turn, can supply any number of \\param{Distributors}. The objective is to minimize the total transportation cost, which is calculated by multiplying the quantity shipped across each link in the network (\\param{Manufacturer}-to-\\param{Warehouse} and \\param{Warehouse}-to-\\param{Distributor}) by a fixed cost per unit of \\param{UnitCost}. The goal is to determine the optimal flow of goods through the network that minimizes the total cost while meeting the demand of the \\param{Distributors}.",
    "problem_info": "Optimize a protein powder supply chain with multiple suppliers, bonded warehouses, manufacturers, warehouses, and distributors to minimize transportation cost.",
    "input_format": "Number of Suppliers, Number of Bonded Warehouses, Number of Manufacturers, Number of Warehouses, Number of Distributors, Number of Warehouse Locations, Number of Distributor Locations, Distance between each pair of Suppliers and Bonded Warehouses, Distance between each pair of Bonded Warehouses and Warehouses, Distance between each pair of Bonded Warehouses and Manufacturers, Distance between each pair of Manufacturers and Warehouses, Distance between each pair of Warehouses and Distributors, Transportation cost per kilometer, Unit cost",
    "output_info": "Optimal flow of goods through the network, minimizing the total transportation cost.",
    "output_format": "The optimal flow of goods through the network that minimizes the total cost while meeting the demand of the Distributors",
    "parameters": [
        {
            "definition": "Number of Suppliers",
            "symbol": "{Suppliers}",
            "value": 3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Bonded Warehouses",
            "symbol": "{BondedWarehouses}",
            "value": 2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Manufacturers",
            "symbol": "{Manufacturers}",
            "value": 1,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Warehouses",
            "symbol": "{Warehouses}",
            "value": 3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Distributors",
            "symbol": "{Distributors}",
            "value": 10,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Warehouse Locations",
            "symbol": "{NumWarehousesLocations}",
            "value": 2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of Distributor Locations",
            "symbol": "{NumDistributorLocations}",
            "value": 4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Supplier i and Bonded Warehouse j",
            "symbol": "{Distance}_{ij}",
            "value": [
                [
                    1942.4,
                    1838.2
                ],
                [
                    580.2,
                    839.2
                ],
                [
                    501.9,
                    1433.2
                ]
            ],
            "shape": [
                "Suppliers",
                "BondedWarehouses"
            ],
            "status": "formulated"
        },
        {
            "definition": "Distance between Manufacturer and Warehouse j",
            "symbol": "{Distance1}_{j}",
            "value": [
                [
                    839,
                    1365
                ]
            ],
            "shape": [
                "Warehouses"
            ],
            "status": "formulated"
        },
        {
            "definition": "Distance between Warehouse j and Distributor k",
            "symbol": "{Distance2}_{jk}",
            "value": [
                [
                    1153.7,
                    1586.3,
                    1428.5,
                    692.3,
                    1085.5,
                    449.2,
                    430.7,
                    2086.9,
                    1923.6,
                    2356.2
                ],
                [
                    578.9,
                    1503.3,
                    2006.4,
                    1372.0,
                    1298.4,
                    654.3,
                    216.2,
                    339.5,
                    1492.2,
                    826.0
                ],
                [
                    250.2,
                    1120.5,
                    977.7,
                    2460.4,
                    15.0,
                    2000.0,
                    20.0,
                    25.0,
                    30.0,
                    2000.0
                ]
            ],
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bonded Warehouse i and Warehouse j",
            "symbol": "{Distance3}_{ij}",
            "value": [
                [
                    1000,
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    10,
                    1000,
                    20,
                    50,
                    1000,
                    20
                ]
            ],
            "shape": [
                "BondedWarehouses",
                "Warehouses"
            ],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bonded Warehouse i and Manufacturer",
            "symbol": "{Distance4}_{i}",
            "value": [
                [
                    2000.0,
                    15.0,
                    20.0
                ],
                [
                    25.0,
                    30.0,
                    2000.0
                ]
            ],
            "shape": [
                "BondedWarehouses"
            ],
            "status": "formulated"
        },
        {
            "definition": "Transportation cost per kilometer",
            "symbol": "{TransportationCost}",
            "value": 6,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Unit cost",
            "symbol": "{UnitCost}",
            "value": 20,
            "shape": [],
            "status": "formulated"
        }
    ],
    "variables": [
        {
            "definition": "Flow of goods from Supplier i to Bonded Warehouse j",
            "symbol": "{Flow_S_BW}_{ij}",
            "type": "continuous",
            "shape": [
                "Suppliers",
                "BondedWarehouses"
            ],
            "status": "coded",
            "code": "Flow_S_BW = model.addVars(Suppliers, BondedWarehouses, vtype=gp.GRB.CONTINUOUS, name=\"Flow_S_BW\")"
        },
        {
            "definition": "Flow of goods from Bonded Warehouse i to Manufacturer",
            "symbol": "{Flow_BW_M}_{i}",
            "type": "continuous",
            "shape": [
                "BondedWarehouses"
            ],
            "status": "coded",
            "code": "Flow_BW_M = model.addVars(BondedWarehouses, name=\"Flow_BW_M\")"
        },
        {
            "definition": "Flow of goods from Bonded Warehouse i to Warehouse j",
            "symbol": "{Flow_BW_W}_{ij}",
            "type": "continuous",
            "shape": [
                "BondedWarehouses",
                "Warehouses"
            ],
            "status": "coded",
            "code": "Flow_BW_W = model.addVars(BondedWarehouses, Warehouses, name=\"Flow_BW_W\")"
        },
        {
            "definition": "Flow of goods from Manufacturer to Warehouse j",
            "symbol": "{Flow_M_W}_{j}",
            "type": "continuous",
            "shape": [
                "Warehouses"
            ],
            "status": "coded",
            "code": "Flow_M_W = model.addVars(Warehouses, vtype=gp.GRB.CONTINUOUS, name=\"Flow_M_W\")"
        },
        {
            "definition": "Flow of goods from Warehouse j to Distributor k",
            "symbol": "{Flow_W_D}_{jk}",
            "type": "continuous",
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "coded",
            "code": "Flow_W_D = model.addVars(Warehouses, Distributors, vtype=gp.GRB.CONTINUOUS, name=\"Flow_W_D\")"
        },
        {
            "definition": "Binary variable indicating whether goods are transported from Supplier i to Bonded Warehouse j",
            "symbol": "{Binary_S_BW}_{ij}",
            "type": "binary",
            "shape": [
                "Suppliers",
                "BondedWarehouses"
            ],
            "status": "coded",
            "code": "Binary_S_BW = model.addVars(Suppliers, BondedWarehouses, vtype=gp.GRB.BINARY, name=\"Binary_S_BW\")"
        },
        {
            "definition": "Binary variable indicating whether goods are transported from Bonded Warehouse i to Manufacturer",
            "symbol": "{Binary_BW_M}_{i}",
            "type": "binary",
            "shape": [
                "BondedWarehouses"
            ],
            "status": "coded",
            "code": "Binary_BW_M = model.addVars(BondedWarehouses, vtype=GRB.BINARY, name=\"Binary_BW_M\")"
        },
        {
            "definition": "Binary variable indicating whether goods are transported from Bonded Warehouse i to Warehouse j",
            "symbol": "{Binary_BW_W}_{ij}",
            "type": "binary",
            "shape": [
                "BondedWarehouses",
                "Warehouses"
            ],
            "status": "coded",
            "code": "Binary_BW_W = model.addVars(BondedWarehouses, Warehouses, vtype=gp.GRB.BINARY, name=\"Binary_BW_W\")"
        },
        {
            "definition": "Binary variable indicating whether goods are transported from Manufacturer to Warehouse j",
            "symbol": "{Binary_M_W}_{j}",
            "type": "binary",
            "shape": [
                "Warehouses"
            ],
            "status": "coded",
            "code": "Binary_M_W = model.addVars(Warehouses, vtype=gp.GRB.BINARY, name=\"Binary_M_W\")"
        },
        {
            "definition": "Binary variable indicating whether goods are transported from Warehouse j to Distributor k",
            "symbol": "{Binary_W_D}_{jk}",
            "type": "binary",
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "coded",
            "code": "Binary_W_D = model.addVars(Warehouses, Distributors, vtype=gp.GRB.BINARY, name=\"Binary_W_D\")"
        }
    ],
    "data": [
        {
            "{Suppliers}": 3
        },
        {
            "{BondedWarehouses}": 2
        },
        {
            "{Manufacturers}": 1
        },
        {
            "{Warehouses}": 3
        },
        {
            "{Distributors}": 10
        },
        {
            "{NumWarehousesLocations}": 2
        },
        {
            "{NumDistributorLocations}": 4
        },
        {
            "{Distance}_{ij}": [
                [
                    1942.4,
                    1838.2
                ],
                [
                    580.2,
                    839.2
                ],
                [
                    501.9,
                    1433.2
                ]
            ]
        },
        {
            "{Distance1}_{j}": [
                [
                    839,
                    1365
                ]
            ]
        },
        {
            "{Distance2}_{jk}": [
                [
                    1153.7,
                    1586.3,
                    1428.5,
                    692.3,
                    1085.5,
                    449.2,
                    430.7,
                    2086.9,
                    1923.6,
                    2356.2
                ],
                [
                    578.9,
                    1503.3,
                    2006.4,
                    1372.0,
                    1298.4,
                    654.3,
                    216.2,
                    339.5,
                    1492.2,
                    826.0
                ],
                [
                    250.2,
                    1120.5,
                    977.7,
                    2460.4,
                    15.0,
                    2000.0,
                    20.0,
                    25.0,
                    30.0,
                    2000.0
                ]
            ]
        },
        {
            "{Distance3}_{ij}": [
                [
                    1000,
                    10,
                    20,
                    30,
                    40,
                    50
                ],
                [
                    10,
                    1000,
                    20,
                    50,
                    1000,
                    20
                ]
            ]
        },
        {
            "{Distance4}_{i}": [
                [
                    2000.0,
                    15.0,
                    20.0
                ],
                [
                    25.0,
                    30.0,
                    2000.0
                ]
            ]
        },
        {
            "{TransportationCost}": 6
        },
        {
            "{UnitCost}": 20
        }
    ],
    "path": "/home/jiosaavn9/LLM_Agent_SCO/Modelv9/data/problem_6",
    "background": "A protein powder supply chain consists of Suppliers, Bonded Warehouses, Manufacturers, Warehouses, and Distributors. The flow of goods is from Suppliers to Bonded Warehouses, from Bonded Warehouses goods can either go to Manufacturers or to Warehouses, then the goods from the Manufacturers move to Warehouses to then to Distributors. There are {NumWarehousesLocations} different warehouse locations and {NumDistributorLocations} different distributor locations. There are {NumManufacturers} Manufacturers, {NumSuppliers} Suppliers and {NumBondedWarehouses} Bonded Warehouses. Each Distributor sources goods from exclusively one Warehouse, while Warehouses can supply multiple Distributors. This task involves optimizing a supply chain network with a transportation cost of {TransportationCost} per kilometer. The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values. The objective is to minimize the total transportation cost, which is calculated by multiplying the quantity shipped across each link in the network (Manufacturer-to-Warehouse and Warehouse-to-Distributor) by a fixed cost per unit of {UnitCost}. The goal is to determine the optimal flow of goods through the network that minimizes the total cost while meeting the demand of the Distributors.",
    "objective": [
        {
            "description": "Minimize the total transportation cost in the supply chain network",
            "status": "coded",
            "formulation": "\\sum_{i=1}^{\\textup{Suppliers}} \\sum_{j=1}^{\\textup{BondedWarehouses}} \\textup{Flow_S_BW}_{ij} \\cdot \\textup{Distance}_{ij} \\cdot \\textup{TransportationCost} + \\sum_{i=1}^{\\textup{BondedWarehouses}} \\textup{Flow_BW_M}_{i} \\cdot \\textup{Distance4}_{i} \\cdot \\textup{TransportationCost} + \\sum_{i=1}^{\\textup{BondedWarehouses}} \\sum_{j=1}^{\\textup{Warehouses}} \\textup{Flow_BW_W}_{ij} \\cdot \\textup{Distance3}_{ij} \\cdot \\textup{TransportationCost} + \\sum_{j=1}^{\\textup{Warehouses}} \\textup{Flow_M_W}_{j} \\cdot \\textup{Distance1}_{j} \\cdot \\textup{TransportationCost} + \\sum_{j=1}^{\\textup{Warehouses}} \\sum_{k=1}^{\\textup{Distributors}} \\textup{Flow_W_D}_{jk} \\cdot \\textup{Distance2}_{jk} \\cdot \\textup{TransportationCost}",
            "related_variables": [
                "Flow_S_BW",
                "Flow_BW_M",
                "Flow_BW_W",
                "Flow_M_W",
                "Flow_W_D"
            ],
            "related_parameters": [
                "Suppliers",
                "BondedWarehouses",
                "Distance",
                "TransportationCost",
                "BondedWarehouses",
                "Distance4",
                "TransportationCost",
                "BondedWarehouses",
                "Warehouses",
                "Distance3",
                "TransportationCost",
                "Warehouses",
                "Distance1",
                "TransportationCost",
                "Warehouses",
                "Distributors",
                "Distance2",
                "TransportationCost"
            ],
            "code": "model.setObjective(gp.quicksum(gp.quicksum(Flow_S_BW[i, j] * Distance[i][j] * TransportationCost for j in range(BondedWarehouses)) for i in range(Suppliers)) + gp.quicksum(Flow_BW_M[i] * Distance4[i] * TransportationCost for i in range(BondedWarehouses)) + gp.quicksum(gp.quicksum(Flow_BW_W[i, j] * Distance3[i][j] * TransportationCost for j in range(Warehouses)) for i in range(BondedWarehouses)) + gp.quicksum(Flow_M_W[j] * Distance1[j] * TransportationCost for j in range(Warehouses)) + gp.quicksum(gp.quicksum(Flow_W_D[j, k] * Distance2[j][k] * TransportationCost for k in range(Distributors)) for j in range(Warehouses)), gp.GRB.MINIMIZE)"
        }
    ],
    "constraints": [
        {
            "description": "For each supplier, the flow of goods from the supplier to bonded warehouses is non-negative",
            "formulation": "\\forall i \\in \\{Suppliers\\}, \\sum_{j=1}^{\\{BondedWarehouses\\}} \\textup{Flow_S_BW}_{ij} \\ge 0",
            "reasoning": "This constraint ensures that the flow of goods from each supplier to bonded warehouses is non-negative, which is a reasonable assumption in a supply chain context.",
            "status": "coded",
            "relevant_section": "The flow of goods is from \\\\param{Suppliers} to \\\\param{BondedWarehouses}",
            "related_variables": [
                "Flow_S_BW"
            ],
            "related_parameters": [],
            "code": "for i in Suppliers:\n    model.addConstr(gp.quicksum(Flow_S_BW[i, j] for j in range(BondedWarehouses)) >= 0, name=f\"Flow_S_BW_nonnegative_{i}\")"
        },
        {
            "description": "For each bonded warehouse, the flow of goods from the bonded warehouse to the manufacturer is non-negative",
            "formulation": "\\forall i \\in \\{BondedWarehouses\\}, \\textup{Flow_BW_M}_{i} \\ge 0",
            "reasoning": "This constraint ensures that the flow of goods from each bonded warehouse to the manufacturer is non-negative, which is a reasonable assumption in a supply chain context.",
            "status": "coded",
            "relevant_section": "from \\\\param{BondedWarehouses} goods can either go to \\\\param{Manufacturers} or to \\\\param{Warehouses}",
            "related_variables": [
                "Flow_BW_M"
            ],
            "related_parameters": [],
            "code": "for i in BondedWarehouses:\n    model.addConstr(Flow_BW_M[i] >= 0, name=\"Flow_BW_M_non_negative\")"
        },
        {
            "description": "For each bonded warehouse, the flow of goods from the bonded warehouse to warehouses is non-negative",
            "formulation": "\\forall i \\in \\{BondedWarehouses\\}, \\sum_{j=1}^{\\{Warehouses\\}} \\textup{Flow_BW_W}_{ij} \\ge 0",
            "reasoning": "This constraint ensures that the flow of goods from each bonded warehouse to warehouses is non-negative, which is a reasonable assumption in a supply chain context.",
            "status": "coded",
            "relevant_section": "from \\\\param{BondedWarehouses} goods can either go to \\\\param{Manufacturers} or to \\\\param{Warehouses}",
            "related_variables": [
                "Flow_BW_W"
            ],
            "related_parameters": [],
            "code": "for i in range(BondedWarehouses):\n    model.addConstr(gp.quicksum(Flow_BW_W[i, j] for j in range(Warehouses)) >= 0, name=\"Flow_BW_W_nonnegative\")"
        },
        {
            "description": "For each manufacturer, the flow of goods from the manufacturer to warehouses is non-negative",
            "formulation": "\\forall j \\in \\{Warehouses\\}, \\textup{Flow_M_W}_{j} \\ge 0",
            "reasoning": "This constraint ensures that the flow of goods from the manufacturer to warehouses is non-negative, which is a reasonable assumption in a supply chain context.",
            "status": "coded",
            "relevant_section": "then the goods from the \\\\param{Manufacturers} move to \\\\param{Warehouses}",
            "related_variables": [
                "Flow_M_W"
            ],
            "related_parameters": [],
            "code": "for j in range(Warehouses):\n    model.addConstr(Flow_M_W[j] >= 0, name=\"Flow_M_W_NonNegative\")"
        },
        {
            "description": "For each warehouse, the flow of goods from the warehouse to distributors is non-negative",
            "formulation": "\\forall j \\in \\{Warehouses\\}, \\sum_{k=1}^{\\{Distributors\\}} \\textup{Flow_W_D}_{jk} \\ge 0",
            "reasoning": "This constraint ensures that the flow of goods from each warehouse to distributors is non-negative, which is a reasonable assumption in a supply chain context.",
            "status": "coded",
            "relevant_section": "to then to \\\\param{Distributors}",
            "related_variables": [
                "Flow_W_D"
            ],
            "related_parameters": [],
            "code": "for j in range(Warehouses):\n    model.addConstr(gp.quicksum(Flow_W_D[j, k] for k in range(Distributors)) >= 0, name='NonNegativeFlowFromWarehouse_' + str(j))"
        },
        {
            "description": "For each supplier i and bonded warehouse j, the binary variable indicating flow from supplier i to bonded warehouse j is 1 if and only if the flow from supplier i to bonded warehouse j is greater than 0",
            "formulation": "\\forall i \\in \\{Suppliers\\}, j \\in \\{BondedWarehouses\\}, \\textup{Binary_S_BW}_{ij} = 1 \\iff \\textup{Flow_S_BW}_{ij} > 0",
            "reasoning": "This constraint links the binary flow variable \\textup{Binary_S_BW}_{ij} to the continuous flow variable \\textup{Flow_S_BW}_{ij}. It ensures that the binary variable is 1 only if there is a positive flow of goods from supplier i to bonded warehouse j, and 0 otherwise.",
            "status": "coded",
            "relevant_section": "The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values.",
            "related_variables": [
                "Binary_S_BW",
                "Flow_S_BW"
            ],
            "related_parameters": [],
            "code": "for i in Suppliers:\n    for j in BondedWarehouses:\n        model.addConstr(Binary_S_BW[i, j] == 1, (Flow_S_BW[i, j] > 0))\n        model.addConstr(Binary_S_BW[i, j] == 0, (Flow_S_BW[i, j] <= 0))"
        },
        {
            "description": "For each bonded warehouse i, the binary variable indicating flow from bonded warehouse i to manufacturer is 1 if and only if the flow from bonded warehouse i to manufacturer is greater than 0",
            "formulation": "\\forall i \\in \\{BondedWarehouses\\}, \\textup{Binary_BW_M}_{i} = 1 \\iff \\textup{Flow_BW_M}_{i} > 0",
            "reasoning": "This constraint links the binary flow variable \\textup{Binary_BW_M}_{i} to the continuous flow variable \\textup{Flow_BW_M}_{i}. It ensures that the binary variable is 1 only if there is a positive flow of goods from bonded warehouse i to manufacturer, and 0 otherwise.",
            "status": "coded",
            "relevant_section": "The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values.",
            "related_variables": [
                "Binary_BW_M",
                "Flow_BW_M"
            ],
            "related_parameters": [],
            "code": "for i in BondedWarehouses:\n    model.addConstr(Binary_BW_M[i] == 1,  Flow_BW_M[i] > 0, name=\"BW_M_flow_constraint\")"
        },
        {
            "description": "For each bonded warehouse i and warehouse j, the binary variable indicating flow from bonded warehouse i to warehouse j is 1 if and only if the flow from bonded warehouse i to warehouse j is greater than 0",
            "formulation": "\\forall i \\in \\{BondedWarehouses\\}, j \\in \\{Warehouses\\}, \\textup{Binary_BW_W}_{ij} = 1 \\iff \\textup{Flow_BW_W}_{ij} > 0",
            "reasoning": "This constraint links the binary flow variable \\textup{Binary_BW_W}_{ij} to the continuous flow variable \\textup{Flow_BW_W}_{ij}. It ensures that the binary variable is 1 only if there is a positive flow of goods from bonded warehouse i to warehouse j, and 0 otherwise.",
            "status": "coded",
            "relevant_section": "The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values.",
            "related_variables": [
                "Binary_BW_W",
                "Flow_BW_W"
            ],
            "related_parameters": [],
            "code": "for i in BondedWarehouses:\n    for j in Warehouses:\n        model.addConstr(Binary_BW_W[i, j] >= Flow_BW_W[i, j] / Flow_BW_W.sum() , name=\"flow_bw_w\")\n        model.addConstr(Binary_BW_W[i, j] <= Flow_BW_W[i, j] , name=\"flow_bw_w_1\")"
        },
        {
            "description": "For each warehouse j, the binary variable indicating flow from manufacturer to warehouse j is 1 if and only if the flow from manufacturer to warehouse j is greater than 0",
            "formulation": "\\forall j \\in \\{Warehouses\\}, \\textup{Binary_M_W}_{j} = 1 \\iff \\textup{Flow_M_W}_{j} > 0",
            "reasoning": "This constraint links the binary flow variable \\textup{Binary_M_W}_{j} to the continuous flow variable \\textup{Flow_M_W}_{j}. It ensures that the binary variable is 1 only if there is a positive flow of goods from manufacturer to warehouse j, and 0 otherwise.",
            "status": "coded",
            "relevant_section": "The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values.",
            "related_variables": [
                "Binary_M_W",
                "Flow_M_W"
            ],
            "related_parameters": [],
            "code": "for j in Warehouses:\n    model.addConstr(Binary_M_W[j] == 1, (Flow_M_W[j] > 0))"
        },
        {
            "description": "For each warehouse j and distributor k, the binary variable indicating flow from warehouse j to distributor k is 1 if and only if the flow from warehouse j to distributor k is greater than 0",
            "formulation": "\\forall j \\in \\{Warehouses\\}, k \\in \\{Distributors\\}, \\textup{Binary_W_D}_{jk} = 1 \\iff \\textup{Flow_W_D}_{jk} > 0",
            "reasoning": "This constraint links the binary flow variable \\textup{Binary_W_D}_{jk} to the continuous flow variable \\textup{Flow_W_D}_{jk}. It ensures that the binary variable is 1 only if there is a positive flow of goods from warehouse j to distributor k, and 0 otherwise.",
            "status": "coded",
            "relevant_section": "The optimization model should use binary flow variables (0 or 1) to indicate whether goods are transported between facilities, where 1 represents flow and 0 represents no flow. The quantity of goods transported is represented by continuous variables, allowing for a range of values.",
            "related_variables": [
                "Binary_W_D",
                "Flow_W_D"
            ],
            "related_parameters": [],
            "code": "for j in Warehouses:\n    for k in Distributors:\n        model.addConstr(Binary_W_D[j, k] == 1,  gp.GRB.EQUAL, Flow_W_D[j, k] > 0, name=\"flow_indicator\")"
        }
    ]
}