{
    "problem_type": "MILP",
    "description": "A protein powder supply chain consists of Contract Manufacturer, Warehouse and Distributor. The flow is Contract Manufacturer to Warehouse to Distributor. Warehouses are at locations - Bhiwandi, Bangalore and Delhi. The Distributors are located at Agra, Ludhiana, Hyderabad, Indore, Jaipur, Surat, Vadodara and Tirunelveli. The Manufactures who have applied to be selected as Contract Manufacturers are at locations - Ahemdabad, Chennai, Kolkata, Pune and Bhopal. Only \\param{ContractManufacturers} manufactures would be selected from these. Optimise the supply chain network and select the two best manufacturers that would minimise the transportation cost. It should also tell which manufacturer is supplying to which warehouse and which warehouse is supplying to which distributor. The latitude and longitude of each location would be given. The cost of transportation per km is Rs. \\param{TransportationCostPerKm}. The distances are specified below.\n\nManufacturer to Warehouse Distances (km)\nManufacturer\\t\\t\\tBhiwandi\\t\\t\\tBengaluru\\t\\t\\tDelhi\nAhemdabad\\t\\t\\t\\param{AhmedabadBhiwandi}\\t\\t\\t\\param{AhmedabadBangalore}\\t\\t\\t\\param{AhmedabadDelhi}\nChennai\\t\\t\\t\\param{ChennaiBhiwandi}\\t\\t\\t\\param{ChennaiBangalore}\\t\\t\\t\\param{ChennaiDelhi}\nKolkata\\t\\t\\t\\param{KolkataBhiwandi}\\t\\t\\t\\param{KolkataBangalore}\\t\\t\\t\\param{KolkataDelhi}\nPune\\t\\t\\t\\param{PuneBhiwandi}\\t\\t\\t\\param{PuneBangalore}\\t\\t\\t\\param{PuneDelhi}\nBhopal\\t\\t\\t\\param{BhopalBhiwandi}\\t\\t\\t\\param{BhopalBangalore}\\t\\t\\t\\param{BhopalDelhi}\n\nWarehouse to Distributor Distances (km)\nWarehouse\\t\\t\\tAgra\\t\\t\\tLudhiana\\t\\t\\tHyderabad\\t\\t\\tIndore\\t\\t\\tJaipur\\t\\t\\tSurat\\t\\t\\tVadodara\\t\\t\\tTirunelveli\nBhiwandi\\t\\t\\t\\param{BhiwandiAgra}\\t\\t\\t\\param{BhiwandiLudhiana}\\t\\t\\t\\param{BhiwandiHyderabad}\\t\\t\\t\\param{BhiwandiIndore}\\t\\t\\t\\param{BhiwandiJaipur}\\t\\t\\t\\param{BhiwandiSurat}\\t\\t\\t\\param{BhiwandiVadodara}\\t\\t\\t\\param{BhiwandiTirunelveli}\nBengaluru\\t\\t\\t\\param{BangaloreAgra}\\t\\t\\t\\param{BangaloreLudhiana}\\t\\t\\t\\param{BangaloreHyderabad}\\t\\t\\t\\param{BangaloreIndore}\\t\\t\\t\\param{BangaloreJaipur}\\t\\t\\t\\param{BangaloreSurat}\\t\\t\\t\\param{BangaloreVadodara}\\t\\t\\t\\param{BangaloreTirunelveli}\nDelhi\\t\\t\\t\\param{DelhiAgra}\\t\\t\\t\\param{DelhiLudhiana}\\t\\t\\t\\param{DelhiHyderabad}\\t\\t\\t\\param{DelhiIndore}\\t\\t\\t\\param{DelhiJaipur}\\t\\t\\t\\param{DelhiSurat}\\t\\t\\t\\param{DelhiVadodara}\\t\\t\\t\\param{DelhiTirunelveli}\n\nCount and add the number of each stakeholders that is Contract manufacturer, warehouse, distributor. To calculate the distance between any stakeholders, add one constraint that would calculate the distance between each stakeholder using the latitude and longitude of respective locations.",
    "problem_info": "This is a supply chain optimization problem that involves selecting two contract manufacturers from a pool of candidates, optimizing the flow of goods from manufacturers to warehouses and then to distributors, and minimizing transportation cost. The problem also requires using latitude and longitude data to calculate distances between locations.",
    "input_format": "Number of contract manufacturers to select, cost of transportation per km, distances between each manufacturer and warehouse, distances between each warehouse and distributor, latitude and longitude of each location",
    "output_info": "The output of the problem is the optimal selection of two contract manufacturers, the flow of goods from manufacturers to warehouses and then to distributors, and the total transportation cost.",
    "output_format": "The two selected manufacturers, the amount of product shipped from each manufacturer to each warehouse, and the amount of product shipped from each warehouse to each distributor.",
    "parameters": [
        {
            "definition": "Number of contract manufacturers to select",
            "symbol": "{ContractManufacturers}",
            "value": 2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Cost of transportation per km",
            "symbol": "{TransportationCostPerKm}",
            "value": 6,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Ahmedabad and Bhiwandi",
            "symbol": "{AhmedabadBhiwandi}",
            "value": 501.9,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Ahmedabad and Bangalore",
            "symbol": "{AhmedabadBangalore}",
            "value": 1433.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Ahmedabad and Delhi",
            "symbol": "{AhmedabadDelhi}",
            "value": 875.3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Chennai and Bhiwandi",
            "symbol": "{ChennaiBhiwandi}",
            "value": 1758.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Chennai and Bangalore",
            "symbol": "{ChennaiBangalore}",
            "value": 327.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Chennai and Delhi",
            "symbol": "{ChennaiDelhi}",
            "value": 2180.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Kolkata and Bhiwandi",
            "symbol": "{KolkataBhiwandi}",
            "value": 1942.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Kolkata and Bangalore",
            "symbol": "{KolkataBangalore}",
            "value": 1838.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Kolkata and Delhi",
            "symbol": "{KolkataDelhi}",
            "value": 1481.8,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Pune and Bhiwandi",
            "symbol": "{PuneBhiwandi}",
            "value": 580.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Pune and Bangalore",
            "symbol": "{PuneBangalore}",
            "value": 839.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Pune and Delhi",
            "symbol": "{PuneDelhi}",
            "value": 1364.6,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhopal and Bhiwandi",
            "symbol": "{BhopalBhiwandi}",
            "value": 819.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhopal and Bangalore",
            "symbol": "{BhopalBangalore}",
            "value": 917.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhopal and Delhi",
            "symbol": "{BhopalDelhi}",
            "value": 708.7,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Agra",
            "symbol": "{BhiwandiAgra}",
            "value": 1153.7,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Ludhiana",
            "symbol": "{BhiwandiLudhiana}",
            "value": 1586.3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Hyderabad",
            "symbol": "{BhiwandiHyderabad}",
            "value": 1428.5,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Indore",
            "symbol": "{BhiwandiIndore}",
            "value": 692.3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Jaipur",
            "symbol": "{BhiwandiJaipur}",
            "value": 1085.5,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Surat",
            "symbol": "{BhiwandiSurat}",
            "value": 449.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Vadodara",
            "symbol": "{BhiwandiVadodara}",
            "value": 430.7,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bhiwandi and Tirunelveli",
            "symbol": "{BhiwandiTirunelveli}",
            "value": 2086.9,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Agra",
            "symbol": "{BangaloreAgra}",
            "value": 1923.6,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Ludhiana",
            "symbol": "{BangaloreLudhiana}",
            "value": 2356.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Hyderabad",
            "symbol": "{BangaloreHyderabad}",
            "value": 578.9,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Indore",
            "symbol": "{BangaloreIndore}",
            "value": 1503.3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Jaipur",
            "symbol": "{BangaloreJaipur}",
            "value": 2006.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Surat",
            "symbol": "{BangaloreSurat}",
            "value": 1372.0,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Vadodara",
            "symbol": "{BangaloreVadodara}",
            "value": 1298.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Bangalore and Tirunelveli",
            "symbol": "{BangaloreTirunelveli}",
            "value": 654.3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Agra",
            "symbol": "{DelhiAgra}",
            "value": 216.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Ludhiana",
            "symbol": "{DelhiLudhiana}",
            "value": 339.5,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Hyderabad",
            "symbol": "{DelhiHyderabad}",
            "value": 1492.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Indore",
            "symbol": "{DelhiIndore}",
            "value": 826.0,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Jaipur",
            "symbol": "{DelhiJaipur}",
            "value": 250.2,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Surat",
            "symbol": "{DelhiSurat}",
            "value": 1120.5,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Vadodara",
            "symbol": "{DelhiVadodara}",
            "value": 977.7,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Distance between Delhi and Tirunelveli",
            "symbol": "{DelhiTirunelveli}",
            "value": 2460.4,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of warehouses",
            "symbol": "{Warehouses}",
            "value": 3,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of distributors",
            "symbol": "{Distributors}",
            "value": 8,
            "shape": [],
            "status": "formulated"
        },
        {
            "definition": "Number of manufacturers",
            "symbol": "{Manufacturers}",
            "value": 5,
            "shape": [],
            "status": "formulated"
        }
    ],
    "variables": [
        {
            "definition": "Binary variable indicating if manufacturer m is selected",
            "symbol": "{SelectedManufacturer}_m",
            "type": "binary",
            "shape": [
                "Manufacturers"
            ],
            "status": "coded",
            "code": "SelectedManufacturer = model.addVars(Manufacturers, vtype=gp.GRB.BINARY, name=\"SelectedManufacturer\")"
        },
        {
            "definition": "Amount of product shipped from manufacturer m to warehouse w",
            "symbol": "{Quantity_mw}",
            "type": "continuous",
            "shape": [
                "Manufacturers",
                "Warehouses"
            ],
            "status": "coded",
            "code": "Quantity_mw = model.addVars(Manufacturers, Warehouses, name=\"Quantity_mw\")"
        },
        {
            "definition": "Amount of product shipped from warehouse w to distributor d",
            "symbol": "{Quantity_wd}",
            "type": "continuous",
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "coded",
            "code": "Quantity_wd = model.addVars('{Warehouses}', '{Distributors}', vtype=gp.GRB.CONTINUOUS, name='Quantity_wd')"
        },
        {
            "definition": "Latitude of manufacturer m",
            "symbol": "{Latitude_m}",
            "shape": [
                "Manufacturers"
            ],
            "status": "coded",
            "code": "Latitude = model.addVars({Manufacturers}, name='Latitude')"
        },
        {
            "definition": "Longitude of manufacturer m",
            "symbol": "{Longitude_m}",
            "shape": [
                "Manufacturers"
            ],
            "status": "coded",
            "code": "Longitude_m = model.addVars(Manufacturers, name=\"Longitude_m\")"
        },
        {
            "definition": "Latitude of warehouse w",
            "symbol": "{Latitude_w}",
            "shape": [
                "Warehouses"
            ],
            "status": "coded",
            "code": "Latitude_w = model.addVars(Warehouses, vtype=gp.GRB.CONTINUOUS, name=\"Latitude_w\")"
        },
        {
            "definition": "Longitude of warehouse w",
            "symbol": "{Longitude_w}",
            "shape": [
                "Warehouses"
            ],
            "status": "coded",
            "code": "Longitude_w = model.addVars(Warehouses, name=\"Longitude_w\")"
        },
        {
            "definition": "Latitude of distributor d",
            "symbol": "{Latitude_d}",
            "shape": [
                "Distributors"
            ],
            "status": "coded",
            "code": "Latitude_d = model.addVars(Distributors, name=\"Latitude_d\")"
        },
        {
            "definition": "Longitude of distributor d",
            "symbol": "{Longitude_d}",
            "shape": [
                "Distributors"
            ],
            "status": "coded",
            "code": "Longitude_d = model.addVars(Distributors, vtype=gp.GRB.CONTINUOUS, name=\"Longitude_d\")"
        },
        {
            "definition": "Distance between manufacturer m and warehouse w",
            "symbol": "Distance_mw",
            "shape": [
                "Manufacturers",
                "Warehouses"
            ],
            "status": "coded",
            "code": "Distance_mw = model.addVars(Manufacturers, Warehouses, name='Distance_mw')"
        },
        {
            "definition": "Distance between warehouse w and distributor d",
            "symbol": "Distance_wd",
            "shape": [
                "Warehouses",
                "Distributors"
            ],
            "status": "coded",
            "code": "Distance_wd = model.addVars(Warehouses, Distributors, name=\"Distance_wd\")"
        }
    ],
    "data": [
        {
            "{ContractManufacturers}": 2
        },
        {
            "{TransportationCostPerKm}": 6
        },
        {
            "{AhmedabadBhiwandi}": 501.9
        },
        {
            "{AhmedabadBangalore}": 1433.2
        },
        {
            "{AhmedabadDelhi}": 875.3
        },
        {
            "{ChennaiBhiwandi}": 1758.4
        },
        {
            "{ChennaiBangalore}": 327.4
        },
        {
            "{ChennaiDelhi}": 2180.4
        },
        {
            "{KolkataBhiwandi}": 1942.4
        },
        {
            "{KolkataBangalore}": 1838.2
        },
        {
            "{KolkataDelhi}": 1481.8
        },
        {
            "{PuneBhiwandi}": 580.2
        },
        {
            "{PuneBangalore}": 839.2
        },
        {
            "{PuneDelhi}": 1364.6
        },
        {
            "{BhopalBhiwandi}": 819.2
        },
        {
            "{BhopalBangalore}": 917.2
        },
        {
            "{BhopalDelhi}": 708.7
        },
        {
            "{BhiwandiAgra}": 1153.7
        },
        {
            "{BhiwandiLudhiana}": 1586.3
        },
        {
            "{BhiwandiHyderabad}": 1428.5
        },
        {
            "{BhiwandiIndore}": 692.3
        },
        {
            "{BhiwandiJaipur}": 1085.5
        },
        {
            "{BhiwandiSurat}": 449.2
        },
        {
            "{BhiwandiVadodara}": 430.7
        },
        {
            "{BhiwandiTirunelveli}": 2086.9
        },
        {
            "{BangaloreAgra}": 1923.6
        },
        {
            "{BangaloreLudhiana}": 2356.2
        },
        {
            "{BangaloreHyderabad}": 578.9
        },
        {
            "{BangaloreIndore}": 1503.3
        },
        {
            "{BangaloreJaipur}": 2006.4
        },
        {
            "{BangaloreSurat}": 1372.0
        },
        {
            "{BangaloreVadodara}": 1298.4
        },
        {
            "{BangaloreTirunelveli}": 654.3
        },
        {
            "{DelhiAgra}": 216.2
        },
        {
            "{DelhiLudhiana}": 339.5
        },
        {
            "{DelhiHyderabad}": 1492.2
        },
        {
            "{DelhiIndore}": 826.0
        },
        {
            "{DelhiJaipur}": 250.2
        },
        {
            "{DelhiSurat}": 1120.5
        },
        {
            "{DelhiVadodara}": 977.7
        },
        {
            "{DelhiTirunelveli}": 2460.4
        },
        {
            "{Warehouses}": 3
        },
        {
            "{Distributors}": 8
        },
        {
            "{Manufacturers}": 5
        }
    ],
    "path": "/home/ckushj/LLM_Agent_SCO/Modelv6/data/problem_4",
    "background": "A protein powder supply chain network involves Contract Manufacturers, Warehouses, and Distributors. The flow is from Contract Manufacturer to Warehouse to Distributor. The objective is to select the two best manufacturers that minimize the transportation cost while optimizing the network. This involves determining which manufacturer supplies to which warehouse and which warehouse supplies to which distributor. The distance between each stakeholder is calculated using their latitude and longitude.",
    "objective": [
        {
            "description": "Minimize the total transportation cost throughout the supply chain network",
            "status": "coded",
            "formulation": "\\sum_{m=1}^{\\textup{Manufacturers}} \\sum_{w=1}^{\\textup{Warehouses}} \\textup{Quantity_mw} \\cdot \\textup{Distance_mw} \\cdot \\textup{TransportationCostPerKm} + \\sum_{w=1}^{\\textup{Warehouses}} \\sum_{d=1}^{\\textup{Distributors}} \\textup{Quantity_wd} \\cdot \\textup{Distance_wd} \\cdot \\textup{TransportationCostPerKm}",
            "related_variables": "",
            "related_parameters": "",
            "code": "model.setObjective(gp.quicksum(Quantity_mw[m, w] * Distance_mw[m, w] * TransportationCostPerKm for m in range(Manufacturers) for w in range(Warehouses)) + gp.quicksum(Quantity_wd[w, d] * Distance_wd[w, d] * TransportationCostPerKm for w in range(Warehouses) for d in range(Distributors)), gp.GRB.MINIMIZE)"
        }
    ],
    "constraints": [
        {
            "description": "The total number of selected manufacturers is equal to ContractManufacturers",
            "formulation": "\\sum_{m=1}^{\\textup{Manufacturers}} \\textup{SelectedManufacturer}_m = \\textup{ContractManufacturers}",
            "reasoning": "This constraint ensures that the total number of selected manufacturers is equal to the specified number of contract manufacturers. It is a direct translation of the problem statement.",
            "status": "coded",
            "relevant_section": "Only \\\\param{ContractManufacturers} manufactures would be selected from these.",
            "related_variables": "",
            "related_parameters": "",
            "code": "model.addConstr(gp.quicksum(SelectedManufacturer[m] for m in range(Manufacturers)) == ContractManufacturers, name=\"SelectManufacturers\")"
        },
        {
            "description": "For each manufacturer m, SelectedManufacturer_m is either 0 or 1",
            "formulation": "\\textup{SelectedManufacturer}_m \\in \\{0, 1\\} \\quad \\forall m \\in \\{1, ..., \\textup{Manufacturers}\\}",
            "reasoning": "This constraint defines the binary nature of the variable SelectedManufacturer_m, indicating whether a manufacturer is selected (1) or not (0). It is a direct translation of the variable definition.",
            "status": "coded",
            "relevant_section": "Binary variable indicating if manufacturer m is selected",
            "related_variables": "",
            "related_parameters": "",
            "code": "for m in Manufacturers:\n    model.addConstr(SelectedManufacturer[m] == 0, name=f\"Binary_Selection_{m}\")"
        },
        {
            "description": "The amount of product shipped from manufacturer m to warehouse w is non-negative",
            "formulation": "\\textup{Quantity_mw} \\ge 0 \\quad \\forall m \\in \\{1, ..., \\textup{Manufacturers}\\}, w \\in \\{1, ..., \\textup{Warehouses}\\}",
            "reasoning": "This constraint ensures that the amount of product shipped from a manufacturer to a warehouse is non-negative. It is a basic assumption for physical quantities.",
            "status": "coded",
            "relevant_section": "Amount of product shipped from manufacturer m to warehouse w",
            "related_variables": "",
            "related_parameters": "",
            "code": "for m in Manufacturers:\n    for w in Warehouses:\n        model.addConstr(Quantity_mw[m, w] >= 0, name=\"non_negative_quantity_mw\")"
        },
        {
            "description": "The amount of product shipped from warehouse w to distributor d is non-negative",
            "formulation": "\\textup{Quantity_wd} \\ge 0 \\quad \\forall w \\in \\{1, ..., \\textup{Warehouses}\\}, d \\in \\{1, ..., \\textup{Distributors}\\}",
            "reasoning": "This constraint ensures that the amount of product shipped from a warehouse to a distributor is non-negative. It is a basic assumption for physical quantities.",
            "status": "coded",
            "relevant_section": "Amount of product shipped from warehouse w to distributor d",
            "related_variables": "",
            "related_parameters": "",
            "code": "for w in range(Warehouses):\n    for d in range(Distributors):\n        model.addConstr(Quantity_wd[w, d] >= 0, name=\"NonNegativeQuantity_wd\")"
        },
        {
            "description": "For each warehouse w, the sum of product shipped from all manufacturers to w is equal to the sum of product shipped from w to all distributors",
            "formulation": "\\sum_{m=1}^{\\textup{Manufacturers}} \\textup{Quantity_mw} = \\sum_{d=1}^{\\textup{Distributors}} \\textup{Quantity_wd} \\quad \\forall w \\in \\{1, ..., \\textup{Warehouses}\\}",
            "reasoning": "This constraint represents the flow balance at each warehouse. The total amount of product received from manufacturers must equal the total amount shipped to distributors.",
            "status": "coded",
            "relevant_section": "The flow is Contract Manufacturer to Warehouse to Distributor.",
            "related_variables": "",
            "related_parameters": "",
            "code": "for w in range(Warehouses):\n    model.addConstr(gp.quicksum(Quantity_mw[m, w] for m in range(Manufacturers)) == gp.quicksum(Quantity_wd[w, d] for d in range(Distributors)), name=\"flow_balance_warehouse_\" + str(w))"
        },
        {
            "description": "Calculate the distance between Manufacturer m and Warehouse w based on their latitude and longitude",
            "formulation": "import math\\n\\textup{Distance_mw} \\eq math.sqrt((\\textup{Latitude_m} - \\textup{Latitude_w})^2 + (\\textup{Longitude_m} - \\textup{Longitude_w})^2)",
            "status": "coded",
            "related_variables": "",
            "related_parameters": "",
            "code": "import math\nfor m in range(Manufacturers):\n    for w in range(Warehouses):\n        model.addConstr(Distance_mw[m, w] == math.sqrt((Latitude_m[m] - Latitude_w[w])**2 + (Longitude_m[m] - Longitude_w[w])**2), name=\"Distance_mw\")"
        },
        {
            "description": "Calculate the distance between Warehouse w and Distributor d based on their latitude and longitude",
            "formulation": "import math\\n\\textup{Distance_wd} \\eq math.sqrt((\\textup{Latitude_w} - \\textup{Latitude_d})^2 + (\\textup{Longitude_w} - \\textup{Longitude_d})^2)",
            "status": "coded",
            "related_variables": "",
            "related_parameters": "",
            "code": "import math\nfor w in range('{Warehouses}'):\n    for d in range('{Distributors}'):\n        model.addConstr(Distance_wd[w, d] == math.sqrt((Latitude_w[w] - Latitude_d[d])**2 + (Longitude_w[w] - Longitude_d[d])**2), name=\"distance_wd\")"
        }
    ],
    "log_folder": "/home/ckushj/LLM_Agent_SCO/Modelv6/data/problem_4/log"
}